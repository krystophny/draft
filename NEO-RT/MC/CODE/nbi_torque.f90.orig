!
  use parmot_mod, only : rmu,ro0,eeff
  use collis_alp, only : swcoll,iswmod,ns,efcolf,velrat,enrat,efcolf_arr,velrat_arr,enrat_arr
  use odeint_mod, only : adaptive
  USE polylag_3,  ONLY : mp,indef, plag1d
  use neo_input,  only : flux
  USE probstart_mod, ONLY : calc_probstart
!
  implicit none
!
  double precision, parameter :: pi=3.14159265358979d0
  double precision,parameter  :: c=2.9979d10
  double precision,parameter  :: e_charge=4.8032d-10
  double precision,parameter  :: e_mass=9.1094d-28
  double precision,parameter  :: p_mass=1.6726d-24
  double precision,parameter  :: ev=1.6022d-12
!
  integer          :: npoi,ierr,L1i,nper,npoiper,i,j,k,ntimstep,ntestpart
  integer          :: ipart,notrace_passing,loopskip,iskip,ilost,istep,kbeg,kend
  real             :: zzg
  double precision :: dphi,rbeg,phibeg,zbeg,bmod00,rcham,rlarm,bmax,bmin
  double precision :: tau,dtau,dtaumin,xi,v0,bmod_ref,E_beam,trace_time
  double precision :: RT0,R0i,cbfi,bz0i,bf0,trap_par
  double precision, dimension(5) :: z
  integer,          dimension(:),   allocatable :: ibinsrc_x
  double precision, dimension(:),   allocatable :: s_ionized
  double precision, dimension(:,:), allocatable :: zstart
  double precision :: amb,am1,am2,Zb,Z1,Z2,densi1,densi2,tempi1,tempi2,tempe, &
                      dchichi,slowrate,dchichi_norm,slowrate_norm
!
  double precision :: bmod,sqrtg,rbig
  double precision, dimension(3) :: x,bder,hcovar,hctrvr,hcurl
  integer :: nplasma
  double precision, dimension(:,:), allocatable :: plasma
  integer,          dimension(mp) :: indu
  double precision, dimension(mp) :: xp,fp
  double precision :: s, der, dxm1
!
!  poloidal flux and data for momentum computations:
  integer, parameter :: npsi=10000
  double precision, parameter :: hpsi=1.d0/npsi
  double precision :: qprev,qact,pcan,ftmom
  double precision, dimension(0:npsi) :: psipol,bthetfac
!
!  beam:
  integer :: nbeam
  double precision :: phi,theta,b_s,beam_s,beam_phi,beam_thet,beam_tormom
  double precision :: delta_s,delta_phi,delta_thet,beam_power
  double precision :: flux_part,flux_ene,flux_mom
  double precision, dimension(:,:), allocatable :: geobeam
  double precision, dimension(:),   allocatable :: distance
  double precision, dimension(:),   allocatable :: probstart
!
!  profiles:
  integer :: nprof
  double precision :: hs_prof,pitch_beg,vel_beg
  double precision, dimension(:), allocatable :: tmom_kin,tmom_mag,tmom_beg
  double precision, dimension(:), allocatable :: part_beg,part_end,fac_tmom_mag
  double precision, dimension(:), allocatable :: powinp_beg,powinp_end
!
!  safety:
  integer, parameter :: nstepmax=100000000
!
!  thermalization:
  double precision, parameter :: vmin_therm=sqrt(1.5d0)
!
!
! inverse relativistic temperature
  rmu=1d5
!
  open(1,file='nbi_torque.inp')
  read (1,*) npoiper           !number of points per period 
  read (1,*) nprof             !number of intervals for profiles
  read (1,*) ntestpart         !number of test particles
  read (1,*) loopskip          !how many loops to skip to shift random numbers
  read (1,*,end=1) swcoll          !collision switch: .true. - collisions on, .false. - collisions off
  if(swcoll) then
    read (1,*) iswmod        !switch of the collision mode:
!                              1 - full operator (pitch-angle and energy scattering and drag)
!                              2 - energy scattering and drag only
!                              3 - drag only
!                              4 - pitch-angle scattering only
  endif
1 continue
  close(1)
!
!
!
! beam geometry, mass number, charge number, energy (eV), power (MW):
  open(1,file='beam.dat')
  read (1,*)
  read (1,*) nbeam,amb,Zb,E_beam,beam_power
  read (1,*)
  allocate(geobeam(6,nbeam),distance(nbeam),probstart(nbeam))
!
  do i=1,nbeam
    read (1,*) distance(i),s,phi,theta,beam_s,beam_phi,beam_thet
    geobeam(1,i)=s
    geobeam(2,i)=phi
    geobeam(3,i)=theta
    geobeam(4,i)=beam_s
    geobeam(5,i)=beam_phi
    geobeam(6,i)=beam_thet
  enddo
!
  close(1)
!
  flux_ene=beam_power*1d7*1d6
  flux_part=flux_ene/(E_beam*eV)
!  for profiles:
  flux_ene=flux_ene*nprof
  flux_part=flux_part*nprof
!
!
!
  open(1,file='plasma.dat')
  read (1,*)
  read (1,*) nplasma,am1,am2,Z1,Z2
  read (1,*)
  allocate(plasma(nplasma,6))
  do i=1,nplasma
    read (1,*) plasma(i,:)
  enddo
  dxm1=1.d0/(plasma(2,1)-plasma(1,1))
  close(1)
!
probstart(1)=0.d0
do i=i,nbeam
probstart(i)=dfloat(i-1)/dfloat(nbeam-1)
enddo
!
CALL calc_probstart(distance, geobeam(1,:), plasma, E_beam, amb, probstart)
!
OPEN(unit=1234,file='probstart.dat')
DO i=1,nbeam
   WRITE(1234,*) distance(i), probstart(i)
END DO
CLOSE(unit=1234)
!STOP
probstart =  probstart/ probstart(nbeam)
!
!
!
!
  if(swcoll) then
!
    do i=1,ns
      s=dfloat(i-1)/dfloat(ns-1)
!
      call indef(s,plasma(1,1),dxm1,nplasma,indu)
!
      xp=plasma(indu,1)
      fp=plasma(indu,2)
!
      call plag1d(s,fp,dxm1,xp,densi1,der)
!
      fp=plasma(indu,3)
!
      call plag1d(s,fp,dxm1,xp,densi2,der)
!
      fp=plasma(indu,4)
!
      call plag1d(s,fp,dxm1,xp,tempi1,der)
!
      fp=plasma(indu,5)
!
      call plag1d(s,fp,dxm1,xp,tempi2,der)
!
      fp=plasma(indu,6)
!
      call plag1d(s,fp,dxm1,xp,tempe,der)
!
      call loacol_nbi(amb,am1,am2,Zb,Z1,Z2,densi1,densi2,tempi1,tempi2,tempe,E_beam, &
                      v0,dchichi,slowrate,dchichi_norm,slowrate_norm)
!
      efcolf_arr(:,i)=efcolf
      velrat_arr(:,i)=velrat
      enrat_arr(:,i)=enrat
    enddo
!
  endif
!
  x=0.d0
  x(1)=1.d-8
!
  call magfie(x,bmod,sqrtg,bder,hcovar,hctrvr,hcurl)
!
!  major radius:
  rbig=hcovar(2)
!  reference field - one Tesla:
  bmod_ref=1.d4
  bmod00=1.d0
!  poloidal flux:
  qprev=hctrvr(3)/hctrvr(2)
  psipol(0)=0.d0
  bthetfac(0)=qprev
!
  do i=1,npsi
    x(1)=hpsi*i
!
    call magfie(x,bmod,sqrtg,bder,hcovar,hctrvr,hcurl)
!
    qact=hctrvr(3)/hctrvr(2)
    psipol(i)=psipol(i-1)+0.5d0*(qprev+qact)*hpsi
    bthetfac(i)=qact
    qprev=qact
  enddo
!
  psipol=psipol*flux*1d8/(2.d0*pi)
  bthetfac=bthetfac*flux*1d8/(2.d0*pi)
!  renormalize for momentum:
  psipol=psipol*e_charge*Zb/c
  bthetfac=bthetfac*e_charge*Zb/c
!
  open(1,file='psipol.dat')
!
  do i=0,npsi
    write (1,*) hpsi*i,psipol(i)
  enddo
!
  close(1)
!
!
!  beam particle velocity, cm/s (not needed?)
  v0=sqrt(2.d0*E_beam*ev/(amb*p_mass))
!
!  Larmor radius:
  rlarm=v0*amb*p_mass*c/(Zb*e_charge*bmod_ref)
  ro0=rlarm*bmod00
!
!  velocity factor for momentum computations:
  ftmom=amb*p_mass*v0

!
!  orbit integration time step:
  dphi=2.d0*pi/npoiper
  dtau=dphi*rbig
!
!
  open(1,file='nbi_torque.log')
  write (1,*) 'npoiper = ',npoiper
  write (1,*) 'ntestpart = ',ntestpart
  write (1,*) 'dphi = ',dphi
  write (1,*) 'v0 = ',v0
  write (1,*) 'rlarm = ',rlarm
  write (1,*) 'dtau = ',dtau
  write (1,*) 'E_beam = ',E_beam
  write (1,*) 'swcoll = ',swcoll
  if(swcoll) then
    write (1,*) 'iswmod = ',iswmod
    write (1,*) 'am1 = ',am1
    write (1,*) 'am2 = ',am2
    write (1,*) 'Z1 = ',Z1
    write (1,*) 'Z2 = ',Z2
  endif
  close(1)
!
!
  hs_prof=1.d0/nprof
  allocate(tmom_kin(nprof),tmom_mag(nprof),tmom_beg(nprof),fac_tmom_mag(nprof))
  allocate(part_beg(nprof),part_end(nprof),powinp_beg(nprof),powinp_end(nprof))
  tmom_kin=0.d0
  tmom_mag=0.d0
  tmom_beg=0.d0
  part_beg=0.d0
  part_end=0.d0
  powinp_beg=0.d0
  powinp_end=0.d0
!
  do i=1,nprof
    s=hs_prof*i
    k=nint(s/hpsi)
    k=max(0,min(npsi,k))
    fac_tmom_mag(i)=bthetfac(k)*hs_prof
  enddo
!
  do iskip=1,loopskip
    do ipart=1,ntestpart
      xi=zzg()
    enddo
  enddo
!
  allocate(zstart(5,ntestpart),ibinsrc_x(ntestpart),s_ionized(ntestpart))
!
  do ipart=1,ntestpart
! determine the starting point:
    xi=zzg()
!
    call binsrc(probstart,1,nbeam,xi,i)
!
    ibinsrc_x(ipart)=i
! coordinates: z(1) = s, z(2) = phi, z(3) = theta
    zstart(1:3,ipart)=geobeam(1:3,i)
! normalized velocity module z(4) = v / v_0:
    zstart(4,ipart)=1.d0
! starting pitch z(5)=v_\parallel / v:
    beam_s=geobeam(4,i)
    beam_phi=geobeam(5,i)
    beam_thet=geobeam(6,i)
!
    x=zstart(1:3,ipart)
!
    call magfie(x,bmod,sqrtg,bder,hcovar,hctrvr,hcurl)
!
!  pitch:
    zstart(5,ipart)=beam_thet*hctrvr(3)+beam_phi*hctrvr(2)
!  guiding center shift:
    delta_s=(beam_thet*hcovar(2)-beam_phi*hcovar(3))*ro0/(sqrtg*bmod)
    delta_phi=(beam_s*hcovar(3)-beam_thet*hcovar(1))*ro0/(sqrtg*bmod)
    delta_thet=(beam_phi*hcovar(1)-beam_s*hcovar(2))*ro0/(sqrtg*bmod)
!
    s_ionized(ipart)=zstart(1,ipart)
    zstart(1,ipart)=zstart(1,ipart)-delta_s
    zstart(2,ipart)=zstart(2,ipart)-delta_phi
    zstart(3,ipart)=zstart(3,ipart)-delta_thet
! counting in starting profiles
    k=int(x(1)/hs_prof)+1
    if(k.gt.nprof.or.k.lt.1) then
      print *,'error in starting position'
      stop
    endif
!    k=max(1,min(nprof,k))
    part_beg(k)=part_beg(k)+flux_part
    powinp_beg(k)=powinp_beg(k)+flux_ene
    tmom_beg(k)=tmom_beg(k)+beam_phi*ftmom*flux_part
!beam_tormom=beam_phi*ftmom+psipol(nint(x(1)/hpsi))    !canonical moment via exact phase space variables
!x=zstart(1:3,ipart)
!call magfie(x,bmod,sqrtg,bder,hcovar,hctrvr,hcurl)
!vel_beg=ftmom*hcovar(2)*zstart(5,ipart)+psipol(nint(x(1)/hpsi)) !canonical moment via guiding center variables
!write(12,*) x(1),beam_tormom,vel_beg
!
  enddo
!stop
!
  part_beg=part_beg/ntestpart
  powinp_beg=powinp_beg/ntestpart
  tmom_beg=tmom_beg/ntestpart
!
  open(1,file='deposition_profiles_beg.dat')
  do i=1,nprof
    write(1,*) (i-0.5d0)*hs_prof,part_beg(i),powinp_beg(i),tmom_beg(i),ntestpart
  enddo
  close(1)
!
!
  do ipart=1,ntestpart
print *,ipart,' / ',ntestpart
!
    z=zstart(:,ipart)
!
    kbeg=int(s_ionized(ipart)/hs_prof)+1
    if(kbeg.gt.nprof) then
      print *,'starting guiding center out'
      cycle
    endif
!
    do istep=1,nstepmax
!
      call regst(z,dtau,ierr)
!
      k=int(z(1)/hs_prof)+1
      if(ierr.ne.0.or.k.gt.nprof) then
        kend=nprof+1
        exit
      endif
      x=z(1:3)
!
      call magfie(x,bmod,sqrtg,bder,hcovar,hctrvr,hcurl)
!
      vel_beg=z(4)
      pitch_beg=z(5)
!
      call stost(z,dtau,iswmod,ierr)
!
      powinp_end(k)=powinp_end(k)+flux_ene*(vel_beg**2-z(4)**2)
      tmom_kin(k)=tmom_kin(k)+(vel_beg*pitch_beg-z(4)*z(5))*hcovar(2)*ftmom*flux_part
!
      if(z(4)*velrat(1).lt.vmin_therm) then
        part_end(k)=part_end(k)+flux_part
        powinp_end(k)=powinp_end(k)+flux_ene*z(4)**2
        tmom_kin(k)=tmom_kin(k)+z(4)*z(5)*hcovar(2)*ftmom*flux_part
        kend=k
        exit
      endif
!
    enddo
    print *,istep,'  steps'
!
    if(kend.gt.kbeg) then
      tmom_mag(kbeg:kend-1)=tmom_mag(kbeg:kend-1)+flux_part
    elseif(kend.lt.kbeg) then
      tmom_mag(kend:kbeg-1)=tmom_mag(kend:kbeg-1)-flux_part
    endif
!
    open(1,file='deposition_profiles_end.dat')
    do i=1,nprof
      write(1,*) (i-0.5d0)*hs_prof,part_end(i)/ipart,powinp_end(i)/ipart,tmom_kin(i)/ipart, &
                 tmom_mag(i)/ipart*fac_tmom_mag(i),ipart
    enddo
    close(1)
!
  enddo
! 
  part_end=part_end/ntestpart
  powinp_end=powinp_end/ntestpart
  tmom_kin=tmom_kin/ntestpart
  tmom_mag=tmom_mag/ntestpart*fac_tmom_mag
!
  print *,'particles :' 
  print *,'beam : ',sum(part_beg)*hs_prof,'  thermalized : ',sum(part_end)*hs_prof
  print *,'energy :' 
  print *,'beam : ',sum(powinp_beg)*hs_prof*1d-13,' MW,  thermalized : ',sum(powinp_end)*hs_prof*1d-13,' MW'
  print *,'momentum :' 
  print *,'beam : ',sum(tmom_beg)*hs_prof*1d-7,' Nm,  thermalized : ',(sum(tmom_kin)+sum(tmom_mag))*hs_prof*1d-7,' Nm'
  print *,'kinematic : ',sum(tmom_kin)*hs_prof*1d-7,' Nm,  magnetic : ',sum(tmom_mag)*hs_prof*1d-7,' Nm'
! 
  open(1,file='deposition_profiles_end.dat')
  do i=1,nprof
    write(1,*) (i-0.5d0)*hs_prof,part_end(i),powinp_end(i),tmom_kin(i),tmom_mag(i),ntestpart
  enddo
  close(1)
!
  open(1,file='nbi_torque.log',position='append')
  write(1,*) 'particles :'
  write(1,*) 'beam : ',sum(part_beg)*hs_prof,'  thermalized : ',sum(part_end)*hs_prof
  write(1,*) 'energy :'
  write(1,*) 'beam : ',sum(powinp_beg)*hs_prof*1d-13,' MW,  thermalized : ',sum(powinp_end)*hs_prof*1d-13,' MW'
  write(1,*) 'momentum :'
  write(1,*) 'beam : ',sum(tmom_beg)*hs_prof*1d-7,' Nm,  thermalized : ',(sum(tmom_kin)+sum(tmom_mag))*hs_prof*1d-7,' Nm'
  write(1,*) 'kinematic : ',sum(tmom_kin)*hs_prof*1d-7,' Nm,  magnetic : ',sum(tmom_mag)*hs_prof*1d-7,' Nm'
  close(1)
!
  end
